name: Static Test Coverage Detector

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Create GitHub issues for missing tests'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  static-test-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Configure gh CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Run Static Test Analysis
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --mcp-config '{"mcpServers": {"levys-awesome-mcp": {"command": "node", "args": ["dist/src/index.js"]}}}'
            --allowedTools mcp__levys-awesome-mcp__invoke_agent,mcp__levys-awesome-mcp__list_agents,mcp__levys-awesome-mcp__put_summary,mcp__levys-awesome-mcp__get_summary
          prompt: |
            I need you to analyze the TypeScript codebase for missing static type tests and then create GitHub issues for missing test coverage. Please work step by step:

            1. First, invoke the static-test-absence-detector agent to analyze the codebase:
               - For PR context: Focus on changed files in PR #${{ github.event.pull_request.number }}
               - For scheduled/manual runs: Analyze all TypeScript files in src/, lib/, and utilities/ directories
               - Generate a detailed JSON report and save it to reports/
               - Create a summary using the put_summary tool

            2. Then, if issues should be created (CREATE_ISSUES=${{ github.event.inputs.create_issues || 'false' }}):
               - Read the generated analysis report
               - Create GitHub issues for files/functions that need static type tests
               - one issue per gap

            Context:
            - Repository: ${{ github.repository }}
            - Event: ${{ github.event_name }}
            - PR Number: ${{ github.event.pull_request.number }}
            - Create Issues: ${{ github.event.inputs.create_issues || 'false' }}
            - Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            The gh CLI is already authenticated with GITHUB_TOKEN for creating issues and PR comments.

      - name: Upload analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-test-analysis-${{ github.run_number }}
          path: |
            reports/
            output_streams/
          retention-days: 30