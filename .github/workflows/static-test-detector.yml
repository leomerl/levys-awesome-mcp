name: Static Test Coverage Detector

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/*.ts'
      - '**/*.tsx'
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Create GitHub issues for missing tests'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  analyze-static-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Configure gh CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Run Static Test Analysis
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --mcp-config '{"mcpServers": {"levys-awesome-mcp": {"command": "node", "args": ["dist/src/index.js"]}}}'
            --allowedTools mcp__levys-awesome-mcp__invoke_agent,mcp__levys-awesome-mcp__list_agents,mcp__levys-awesome-mcp__put_summary,mcp__levys-awesome-mcp__get_summary
          allowed_bots: claude
          prompt: |
            I need you to analyze the TypeScript codebase for missing static type tests. Please invoke the static-test-absence-detector agent to:

            ${{ github.event_name == 'pull_request' && format('- Focus on changed files in PR #{0}', github.event.pull_request.number) || '- Analyze all TypeScript files in src/, lib/, and utilities/ directories' }}
            - Generate a detailed JSON report and save it to reports/
            - Create a summary using the put_summary tool
            ${{ github.event_name == 'pull_request' && format('- Add a summary comment to PR #{0} using gh CLI', github.event.pull_request.number) || '' }}

            Context:
            - Repository: ${{ github.repository }}
            - Event: ${{ github.event_name }}
            - PR Number: ${{ github.event.pull_request.number }}
            - Workflow Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            The gh CLI is already authenticated with GITHUB_TOKEN for PR comments.

      - name: Upload analysis reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-test-analysis-${{ github.run_number }}
          path: |
            reports/
            output_streams/
          retention-days: 30

  create-issues:
    needs: analyze-static-tests
    runs-on: ubuntu-latest
    if: (github.event_name == 'schedule' || github.event.inputs.create_issues == 'true') && success()
    permissions:
      contents: read
      issues: write
      id-token: write

    steps:
      - name: Download analysis reports
        uses: actions/download-artifact@v4
        with:
          name: static-test-analysis-${{ github.run_number }}
          path: ./analysis-reports

      - name: Configure gh CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status

      - name: Create GitHub Issues
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: --allowedTools Bash(gh issue create:*),Bash(gh issue list:*),Read,Grep,Glob
          prompt: |
            I need you to create GitHub issues based on the static test analysis report. Please:

            1. Read the analysis report files from ./reports/ directory
            2. Examine the JSON reports to understand what static type tests are missing
            3. First, use gh issue list to check existing open issues and avoid duplicates
            4. Create GitHub issues for files/functions that need static type tests
            5. Create one issue per gap or group related gaps logically
            6. Use the authenticated gh CLI to create issues with proper titles and descriptions
            7. In each issue description, include @static-test-creator to mention him and tell him to fix it

            Context:
            - Repository: ${{ github.repository }}
            - Analysis Run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - Event: ${{ github.event_name }}

            The gh CLI is already authenticated with GITHUB_TOKEN for creating issues.
            Use standard tools like Read and Bash to examine the reports and create issues.