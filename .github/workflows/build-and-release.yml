name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Package
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build

      - name: Create npm package
        run: npm pack

      - name: Get package name and version
        id: package-info
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_FILENAME="${PACKAGE_NAME}-${PACKAGE_VERSION}.tgz"
          # Handle scoped packages
          PACKAGE_FILENAME=$(echo "$PACKAGE_FILENAME" | sed 's/@//g' | sed 's/\//-/g')
          echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package-version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "package-filename=$PACKAGE_FILENAME" >> $GITHUB_OUTPUT
          echo "Package filename: $PACKAGE_FILENAME"

      - name: Upload npm package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-${{ steps.package-info.outputs.package-version }}
          path: "*.tgz"
          retention-days: 30

      - name: Upload package info
        uses: actions/upload-artifact@v4
        with:
          name: package-info
          path: |
            package.json
            package-lock.json

  verify-installation:
    name: Verify Installation
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          pattern: npm-package-*
          merge-multiple: true

      - name: Create test directory and install package
        run: |
          mkdir -p /tmp/test-install
          cd /tmp/test-install
          npm init -y
          npm install $GITHUB_WORKSPACE/*.tgz

      - name: Verify commands directory was created
        working-directory: /tmp/test-install
        run: |
          if [ ! -d ".claude/commands" ]; then
            echo "❌ ERROR: .claude/commands directory was not created after installation"
            exit 1
          fi
          echo "✅ SUCCESS: .claude/commands directory exists"

          # Also check if it contains any files
          FILE_COUNT=$(find .claude/commands -type f | wc -l)
          echo "Found ${FILE_COUNT} file(s) in .claude/commands"

          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "⚠️  WARNING: .claude/commands directory is empty"
          else
            echo "✅ .claude/commands contains files:"
            ls -la .claude/commands
          fi

      - name: Verify agents directory was created
        working-directory: /tmp/test-install
        run: |
          if [ ! -d ".claude/agents" ]; then
            echo "❌ ERROR: .claude/agents directory was not created after installation"
            exit 1
          fi
          echo "✅ SUCCESS: .claude/agents directory exists"

          # Check if it contains any agent files
          AGENT_COUNT=$(find .claude/agents -type f -name "*.md" | wc -l)
          echo "Found ${AGENT_COUNT} agent file(s) in .claude/agents"

          if [ "$AGENT_COUNT" -eq 0 ]; then
            echo "❌ ERROR: .claude/agents directory contains no agent (.md) files"
            exit 1
          else
            echo "✅ .claude/agents contains ${AGENT_COUNT} agent(s):"
            ls -la .claude/agents
          fi

  publish-github:
    name: Publish to GitHub Packages
    needs: [build, verify-installation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@leomerl'

      - name: Install dependencies
        run: npm ci

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-npm:
    name: Publish to npm Registry
    needs: [build, verify-installation]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for npm registry
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Publish to npm
        run: npm publish --registry=https://registry.npmjs.org --access=public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
